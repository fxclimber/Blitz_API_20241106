#pragma once
#include <string>

class UObject
{
public:
	UObject();

	// 혹여나 자식들의 소멸자가 호출 안되는 경우를 막기위에서
	// 가상함수 테이블을 만들 것이므로 왠만하면 자식쪽의 소멸자가 호출안되는 경우는 없을 것이다.
	virtual ~UObject();

	std::string GetName() const
	{
		return Name;
	}

	std::string_view GetNameView() const
	{
		return Name.c_str();
	}

	// 이름 지정할때 뭔가 하고 싶으면 오버라이드해.
	virtual void SetName(std::string_view _Name)
	{
		Name = _Name.data();
	}

	// bool IsActive()
	virtual bool IsActive()
	{
		return IsActiveValue && false == IsDestroyValue;
	}

	virtual bool IsDestroy()
	{
		return IsDestroyValue;
	}

	// _Time 시간후에 죽어라.
	void Destroy(float _Time = 0.0f)
	{
		DeathTime = _Time;

		if (0.0f < _Time)
		{
			IsDeathTimeCheck = true;
			return;
		}

		IsDestroyValue = true;
	}

	virtual void ReleaseCheck(float _DeltaTime)
	{
		if (false == IsDeathTimeCheck)
		{
			return;
		}

		CurDeathTime += _DeltaTime;

		if (DeathTime <= CurDeathTime)
		{
			IsDestroyValue = true;
		}
	}

	// 모든 기능 정지.
	// 얼음 외부에서 다른 객체가 풀어줘야 한다.
	void SetActive(bool _IsActive)
	{
		IsActiveValue = _IsActive;
	}


protected:

private:
	bool IsDestroyValue = false;
	bool IsActiveValue = true;

	bool IsDeathTimeCheck = false;
	float DeathTime = 0.0f;
	float CurDeathTime = 0.0f;

	std::string Name;

};

